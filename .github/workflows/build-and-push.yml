name: Build and push a Docker image

on:
  push:
    branches:
      - main
      - stage
      - prod

  workflow_dispatch:
    inputs:
      ref:
        description: 'ref to be deployed (e.g. "refs/heads/main", "refs/heads/stage", "refs/heads/prod")'
        type: string
        required: true
        default: refs/heads/main
env:
  APP: mozilla-language-portal
  APPLICATION_REPOSITORY: mozilla-l10n/birdbox-mozilla-language-portal
  IMAGE: mozilla-language-portal
  GAR_LOCATION: us
  GCP_PROJECT_ID: moz-fx-moz-language-porta-3139
  GAR_REPOSITORY: moz-language-portal-prod
  REF_ID: ${{ github.ref }}


jobs:
  push_image_to_gar:
    name: Push Image to GAR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    outputs:
        deployment_env: ${{ env.DEPLOYMENT_ENV }}
        image_tag: ${{ env.TAG }}

    steps:
      - id: checkout-application-repo
        uses: actions/checkout@v4
        with:
            fetch-depth: 0
            fetch-tags: true
            ref: ${{ env.REF_ID }}

      - id: long-sha
        run: |-
          echo "LONG_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - id: stage_image_tag
        name: Set Docker stage image tag for updates of the stage branch
        if: github.ref == 'refs/heads/stage'
        run: |

            echo TAG="stage-$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"

            # Updates to the stage branch are deployed to stage.
            echo DEPLOYMENT_ENV=stage >> "$GITHUB_ENV"

      - id: prod_image_tag
        name: Set Docker prod image tag for updates of the prod branch
        if: github.ref == 'refs/heads/prod'
        run: |

          echo TAG="prod-$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
          # updates to the prod branch are deployed to prod.
          echo DEPLOYMENT_ENV=prod >> "$GITHUB_ENV"

      - name: print TAG
        run: echo "TAG is $TAG"
        env:
          TAG: ${{ env.TAG }}

      - uses: docker/setup-buildx-action@v3

      - id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          service_account:  artifact-writer@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
          workload_identity_provider: ${{ vars.GCPV2_GITHUB_WORKLOAD_IDENTITY_PROVIDER }}

      - uses: docker/login-action@v3
        name: Docker login
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.gcp-auth.outputs.access_token }}

      - id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY}}/${{ env.IMAGE}}:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: GIT_SHA=${{ steps.long-sha.outputs.LONG_SHA }}
